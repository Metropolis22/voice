<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Pitch Detection</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
            padding: 20px;
        }
        #note {
            font-size: 36px;
            font-weight: bold;
        }
        #noteName {
            font-size: 24px;
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <h1>피치테스트</h1>
    <div id="note">Detecting...</div>
    <div id="noteName">음 이름을 표시합니다...</div>

    <script>
        const C3_PITCH = 130.8; // C3 기준 주파수
        const ALL_NOTES = ["C", "C#", "D", "D#", "E", "F", "F#", "G", "G#", "A", "A#", "B"];

        // 주파수에서 가장 가까운 음을 찾는 함수
        function findClosestNote(pitch) {
            const semitoneIndex = Math.round(12 * Math.log2(pitch / C3_PITCH)); // 정확한 반음 계산
            const closestNote = ALL_NOTES[semitoneIndex % 12]; // 음 이름
            const closestOctave = Math.floor(semitoneIndex / 12) + 3; // 옥타브 계산 (기준을 C3로 설정)
            const closestPitch = C3_PITCH * Math.pow(2, semitoneIndex / 12); // 주파수 계산
            return { closestNote, closestOctave, closestPitch };
        }

        // 오디오 분석을 시작하는 함수
        async function startAudio() {
            const audioContext = new (window.AudioContext || window.webkitAudioContext)();
            const analyser = audioContext.createAnalyser();
            analyser.fftSize = 2048; // FFT 크기 설정

            // 마이크에서 오디오 입력 받기
            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
            const source = audioContext.createMediaStreamSource(stream);
            source.connect(analyser);

            const bufferLength = analyser.frequencyBinCount;
            const dataArray = new Float32Array(bufferLength);  // Float32Array를 사용하여 더 정밀한 데이터 처리

            function detectPitch() {
                analyser.getFloatFrequencyData(dataArray);  // 더 정밀한 주파수 데이터 가져오기

                // 가장 큰 주파수 찾기
                let maxIndex = -1;
                let maxMagnitude = -Infinity;
                for (let i = 0; i < bufferLength; i++) {
                    if (dataArray[i] > maxMagnitude) {
                        maxMagnitude = dataArray[i];
                        maxIndex = i;
                    }
                }

                const sampleRate = audioContext.sampleRate;
                const frequency = maxIndex * (sampleRate / analyser.fftSize); // 최대 주파수 계산

                // 주파수가 원하는 범위 내에 있으면 음을 계산하여 표시
                if (frequency >= 130.8 && frequency <= 523.25) { // C3부터 C5까지
                    const { closestNote, closestOctave, closestPitch } = findClosestNote(frequency);
                    
                    // UI에 감지된 음과 주파수 표시
                    document.getElementById('note').textContent = `${closestNote}${closestOctave} ${frequency.toFixed(1)} Hz (${closestPitch.toFixed(1)} Hz)`;
                    document.getElementById('noteName').textContent = `현재 음: ${closestNote}${closestOctave}`;
                }

                requestAnimationFrame(detectPitch);
            }

            detectPitch();
        }

        // 페이지가 로드될 때 오디오 감지 시작
        startAudio();
    </script>
</body>
</html>
